/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.osb.distributed.messaging.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.osb.distributed.messaging.model.QueuedMessage;
import com.liferay.osb.distributed.messaging.model.QueuedMessageMessageObjectBlobModel;
import com.liferay.osb.distributed.messaging.model.QueuedMessageModel;
import com.liferay.osb.distributed.messaging.service.QueuedMessageLocalServiceUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the QueuedMessage service. Represents a row in the &quot;DM_QueuedMessage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QueuedMessageModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QueuedMessageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QueuedMessageImpl
 * @generated
 */
public class QueuedMessageModelImpl
	extends BaseModelImpl<QueuedMessage> implements QueuedMessageModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a queued message model instance should use the <code>QueuedMessage</code> interface instead.
	 */
	public static final String TABLE_NAME = "DM_QueuedMessage";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"queuedMessageId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP},
		{"messageBrokerClassName", Types.VARCHAR}, {"topic", Types.VARCHAR},
		{"messageObject", Types.BLOB}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("queuedMessageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("messageBrokerClassName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("topic", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("messageObject", Types.BLOB);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DM_QueuedMessage (mvccVersion LONG default 0 not null,queuedMessageId LONG not null primary key,createDate DATE null,messageBrokerClassName VARCHAR(255) null,topic VARCHAR(150) null,messageObject BLOB)";

	public static final String TABLE_SQL_DROP = "drop table DM_QueuedMessage";

	public static final String ORDER_BY_JPQL =
		" ORDER BY queuedMessage.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DM_QueuedMessage.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long MESSAGEBROKERCLASSNAME_COLUMN_BITMASK = 1L;

	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public QueuedMessageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _queuedMessageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setQueuedMessageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _queuedMessageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QueuedMessage.class;
	}

	@Override
	public String getModelClassName() {
		return QueuedMessage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<QueuedMessage, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<QueuedMessage, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QueuedMessage, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((QueuedMessage)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<QueuedMessage, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<QueuedMessage, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(QueuedMessage)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<QueuedMessage, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<QueuedMessage, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, QueuedMessage>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			QueuedMessage.class.getClassLoader(), QueuedMessage.class,
			ModelWrapper.class);

		try {
			Constructor<QueuedMessage> constructor =
				(Constructor<QueuedMessage>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<QueuedMessage, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<QueuedMessage, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<QueuedMessage, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<QueuedMessage, Object>>();
		Map<String, BiConsumer<QueuedMessage, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<QueuedMessage, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", QueuedMessage::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<QueuedMessage, Long>)QueuedMessage::setMvccVersion);
		attributeGetterFunctions.put(
			"queuedMessageId", QueuedMessage::getQueuedMessageId);
		attributeSetterBiConsumers.put(
			"queuedMessageId",
			(BiConsumer<QueuedMessage, Long>)QueuedMessage::setQueuedMessageId);
		attributeGetterFunctions.put(
			"createDate", QueuedMessage::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<QueuedMessage, Date>)QueuedMessage::setCreateDate);
		attributeGetterFunctions.put(
			"messageBrokerClassName", QueuedMessage::getMessageBrokerClassName);
		attributeSetterBiConsumers.put(
			"messageBrokerClassName",
			(BiConsumer<QueuedMessage, String>)
				QueuedMessage::setMessageBrokerClassName);
		attributeGetterFunctions.put("topic", QueuedMessage::getTopic);
		attributeSetterBiConsumers.put(
			"topic",
			(BiConsumer<QueuedMessage, String>)QueuedMessage::setTopic);
		attributeGetterFunctions.put(
			"messageObject", QueuedMessage::getMessageObject);
		attributeSetterBiConsumers.put(
			"messageObject",
			(BiConsumer<QueuedMessage, Blob>)QueuedMessage::setMessageObject);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@Override
	public long getQueuedMessageId() {
		return _queuedMessageId;
	}

	@Override
	public void setQueuedMessageId(long queuedMessageId) {
		_queuedMessageId = queuedMessageId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public String getMessageBrokerClassName() {
		if (_messageBrokerClassName == null) {
			return "";
		}
		else {
			return _messageBrokerClassName;
		}
	}

	@Override
	public void setMessageBrokerClassName(String messageBrokerClassName) {
		_columnBitmask |= MESSAGEBROKERCLASSNAME_COLUMN_BITMASK;

		if (_originalMessageBrokerClassName == null) {
			_originalMessageBrokerClassName = _messageBrokerClassName;
		}

		_messageBrokerClassName = messageBrokerClassName;
	}

	public String getOriginalMessageBrokerClassName() {
		return GetterUtil.getString(_originalMessageBrokerClassName);
	}

	@Override
	public String getTopic() {
		if (_topic == null) {
			return "";
		}
		else {
			return _topic;
		}
	}

	@Override
	public void setTopic(String topic) {
		_topic = topic;
	}

	@Override
	public Blob getMessageObject() {
		if (_messageObjectBlobModel == null) {
			try {
				_messageObjectBlobModel =
					QueuedMessageLocalServiceUtil.getMessageObjectBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_messageObjectBlobModel != null) {
			blob = _messageObjectBlobModel.getMessageObjectBlob();
		}

		return blob;
	}

	@Override
	public void setMessageObject(Blob messageObject) {
		if (_messageObjectBlobModel == null) {
			_messageObjectBlobModel = new QueuedMessageMessageObjectBlobModel(
				getPrimaryKey(), messageObject);
		}
		else {
			_messageObjectBlobModel.setMessageObjectBlob(messageObject);
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, QueuedMessage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QueuedMessage toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, QueuedMessage>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QueuedMessageImpl queuedMessageImpl = new QueuedMessageImpl();

		queuedMessageImpl.setMvccVersion(getMvccVersion());
		queuedMessageImpl.setQueuedMessageId(getQueuedMessageId());
		queuedMessageImpl.setCreateDate(getCreateDate());
		queuedMessageImpl.setMessageBrokerClassName(
			getMessageBrokerClassName());
		queuedMessageImpl.setTopic(getTopic());

		queuedMessageImpl.resetOriginalValues();

		return queuedMessageImpl;
	}

	@Override
	public int compareTo(QueuedMessage queuedMessage) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), queuedMessage.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof QueuedMessage)) {
			return false;
		}

		QueuedMessage queuedMessage = (QueuedMessage)object;

		long primaryKey = queuedMessage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalMessageBrokerClassName = _messageBrokerClassName;

		_messageObjectBlobModel = null;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<QueuedMessage> toCacheModel() {
		QueuedMessageCacheModel queuedMessageCacheModel =
			new QueuedMessageCacheModel();

		queuedMessageCacheModel.mvccVersion = getMvccVersion();

		queuedMessageCacheModel.queuedMessageId = getQueuedMessageId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			queuedMessageCacheModel.createDate = createDate.getTime();
		}
		else {
			queuedMessageCacheModel.createDate = Long.MIN_VALUE;
		}

		queuedMessageCacheModel.messageBrokerClassName =
			getMessageBrokerClassName();

		String messageBrokerClassName =
			queuedMessageCacheModel.messageBrokerClassName;

		if ((messageBrokerClassName != null) &&
			(messageBrokerClassName.length() == 0)) {

			queuedMessageCacheModel.messageBrokerClassName = null;
		}

		queuedMessageCacheModel.topic = getTopic();

		String topic = queuedMessageCacheModel.topic;

		if ((topic != null) && (topic.length() == 0)) {
			queuedMessageCacheModel.topic = null;
		}

		return queuedMessageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{mvccVersion=");
		sb.append(getMvccVersion());
		sb.append(", queuedMessageId=");
		sb.append(getQueuedMessageId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", messageBrokerClassName=");
		sb.append(getMessageBrokerClassName());
		sb.append(", topic=");
		sb.append(getTopic());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.osb.distributed.messaging.model.QueuedMessage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>mvccVersion</column-name><column-value><![CDATA[");
		sb.append(getMvccVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>queuedMessageId</column-name><column-value><![CDATA[");
		sb.append(getQueuedMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageBrokerClassName</column-name><column-value><![CDATA[");
		sb.append(getMessageBrokerClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>topic</column-name><column-value><![CDATA[");
		sb.append(getTopic());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, QueuedMessage>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mvccVersion;
	private long _queuedMessageId;
	private Date _createDate;
	private String _messageBrokerClassName;
	private String _originalMessageBrokerClassName;
	private String _topic;
	private QueuedMessageMessageObjectBlobModel _messageObjectBlobModel;
	private long _columnBitmask;
	private QueuedMessage _escapedModel;

}