/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.osb.provisioning.model.impl;

import com.liferay.osb.provisioning.model.ProductBundleProducts;
import com.liferay.osb.provisioning.model.ProductBundleProductsModel;
import com.liferay.osb.provisioning.service.persistence.ProductBundleProductsPK;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ProductBundleProducts service. Represents a row in the &quot;Provisioning_ProductBundleProducts&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProductBundleProductsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductBundleProductsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProductBundleProductsImpl
 * @generated
 */
public class ProductBundleProductsModelImpl
	extends BaseModelImpl<ProductBundleProducts>
	implements ProductBundleProductsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a product bundle products model instance should use the <code>ProductBundleProducts</code> interface instead.
	 */
	public static final String TABLE_NAME =
		"Provisioning_ProductBundleProducts";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"productBundleId", Types.BIGINT},
		{"productKey", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productBundleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productKey", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Provisioning_ProductBundleProducts (mvccVersion LONG default 0 not null,productBundleId LONG not null,productKey VARCHAR(75) not null,primary key (productBundleId, productKey))";

	public static final String TABLE_SQL_DROP =
		"drop table Provisioning_ProductBundleProducts";

	public static final String ORDER_BY_JPQL =
		" ORDER BY productBundleProducts.id.productBundleId ASC, productBundleProducts.id.productKey ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Provisioning_ProductBundleProducts.productBundleId ASC, Provisioning_ProductBundleProducts.productKey ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long PRODUCTBUNDLEID_COLUMN_BITMASK = 1L;

	public static final long PRODUCTKEY_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public ProductBundleProductsModelImpl() {
	}

	@Override
	public ProductBundleProductsPK getPrimaryKey() {
		return new ProductBundleProductsPK(_productBundleId, _productKey);
	}

	@Override
	public void setPrimaryKey(ProductBundleProductsPK primaryKey) {
		setProductBundleId(primaryKey.productBundleId);
		setProductKey(primaryKey.productKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ProductBundleProductsPK(_productBundleId, _productKey);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ProductBundleProductsPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ProductBundleProducts.class;
	}

	@Override
	public String getModelClassName() {
		return ProductBundleProducts.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ProductBundleProducts, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ProductBundleProducts, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductBundleProducts, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ProductBundleProducts)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ProductBundleProducts, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ProductBundleProducts, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ProductBundleProducts)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ProductBundleProducts, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ProductBundleProducts, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ProductBundleProducts>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ProductBundleProducts.class.getClassLoader(),
			ProductBundleProducts.class, ModelWrapper.class);

		try {
			Constructor<ProductBundleProducts> constructor =
				(Constructor<ProductBundleProducts>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ProductBundleProducts, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ProductBundleProducts, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ProductBundleProducts, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ProductBundleProducts, Object>>();
		Map<String, BiConsumer<ProductBundleProducts, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<ProductBundleProducts, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", ProductBundleProducts::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<ProductBundleProducts, Long>)
				ProductBundleProducts::setMvccVersion);
		attributeGetterFunctions.put(
			"productBundleId", ProductBundleProducts::getProductBundleId);
		attributeSetterBiConsumers.put(
			"productBundleId",
			(BiConsumer<ProductBundleProducts, Long>)
				ProductBundleProducts::setProductBundleId);
		attributeGetterFunctions.put(
			"productKey", ProductBundleProducts::getProductKey);
		attributeSetterBiConsumers.put(
			"productKey",
			(BiConsumer<ProductBundleProducts, String>)
				ProductBundleProducts::setProductKey);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@Override
	public long getProductBundleId() {
		return _productBundleId;
	}

	@Override
	public void setProductBundleId(long productBundleId) {
		_columnBitmask |= PRODUCTBUNDLEID_COLUMN_BITMASK;

		if (!_setOriginalProductBundleId) {
			_setOriginalProductBundleId = true;

			_originalProductBundleId = _productBundleId;
		}

		_productBundleId = productBundleId;
	}

	public long getOriginalProductBundleId() {
		return _originalProductBundleId;
	}

	@Override
	public String getProductKey() {
		if (_productKey == null) {
			return "";
		}
		else {
			return _productKey;
		}
	}

	@Override
	public void setProductKey(String productKey) {
		_productKey = productKey;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ProductBundleProducts toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ProductBundleProducts>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductBundleProductsImpl productBundleProductsImpl =
			new ProductBundleProductsImpl();

		productBundleProductsImpl.setMvccVersion(getMvccVersion());
		productBundleProductsImpl.setProductBundleId(getProductBundleId());
		productBundleProductsImpl.setProductKey(getProductKey());

		productBundleProductsImpl.resetOriginalValues();

		return productBundleProductsImpl;
	}

	@Override
	public int compareTo(ProductBundleProducts productBundleProducts) {
		ProductBundleProductsPK primaryKey =
			productBundleProducts.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ProductBundleProducts)) {
			return false;
		}

		ProductBundleProducts productBundleProducts =
			(ProductBundleProducts)object;

		ProductBundleProductsPK primaryKey =
			productBundleProducts.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ProductBundleProductsModelImpl productBundleProductsModelImpl = this;

		productBundleProductsModelImpl._originalProductBundleId =
			productBundleProductsModelImpl._productBundleId;

		productBundleProductsModelImpl._setOriginalProductBundleId = false;

		productBundleProductsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProductBundleProducts> toCacheModel() {
		ProductBundleProductsCacheModel productBundleProductsCacheModel =
			new ProductBundleProductsCacheModel();

		productBundleProductsCacheModel.productBundleProductsPK =
			getPrimaryKey();

		productBundleProductsCacheModel.mvccVersion = getMvccVersion();

		productBundleProductsCacheModel.productBundleId = getProductBundleId();

		productBundleProductsCacheModel.productKey = getProductKey();

		String productKey = productBundleProductsCacheModel.productKey;

		if ((productKey != null) && (productKey.length() == 0)) {
			productBundleProductsCacheModel.productKey = null;
		}

		return productBundleProductsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ProductBundleProducts, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ProductBundleProducts, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductBundleProducts, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((ProductBundleProducts)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ProductBundleProducts, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ProductBundleProducts, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductBundleProducts, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((ProductBundleProducts)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ProductBundleProducts>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mvccVersion;
	private long _productBundleId;
	private long _originalProductBundleId;
	private boolean _setOriginalProductBundleId;
	private String _productKey;
	private long _columnBitmask;
	private ProductBundleProducts _escapedModel;

}