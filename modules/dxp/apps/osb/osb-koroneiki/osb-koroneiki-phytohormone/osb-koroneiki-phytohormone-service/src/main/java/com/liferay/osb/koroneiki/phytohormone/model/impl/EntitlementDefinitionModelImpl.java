/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.osb.koroneiki.phytohormone.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.osb.koroneiki.phytohormone.model.EntitlementDefinition;
import com.liferay.osb.koroneiki.phytohormone.model.EntitlementDefinitionModel;
import com.liferay.osb.koroneiki.phytohormone.model.EntitlementDefinitionSoap;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EntitlementDefinition service. Represents a row in the &quot;Koroneiki_EntitlementDefinition&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EntitlementDefinitionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntitlementDefinitionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntitlementDefinitionImpl
 * @generated
 */
@JSON(strict = true)
public class EntitlementDefinitionModelImpl
	extends BaseModelImpl<EntitlementDefinition>
	implements EntitlementDefinitionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a entitlement definition model instance should use the <code>EntitlementDefinition</code> interface instead.
	 */
	public static final String TABLE_NAME = "Koroneiki_EntitlementDefinition";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"entitlementDefinitionId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP},
		{"entitlementDefinitionKey", Types.VARCHAR},
		{"classNameId", Types.BIGINT}, {"name", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"definition", Types.VARCHAR},
		{"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entitlementDefinitionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("entitlementDefinitionKey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("classNameId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("definition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Koroneiki_EntitlementDefinition (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,entitlementDefinitionId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,entitlementDefinitionKey VARCHAR(75) null,classNameId LONG,name VARCHAR(75) null,description VARCHAR(75) null,definition STRING null,status INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table Koroneiki_EntitlementDefinition";

	public static final String ORDER_BY_JPQL =
		" ORDER BY entitlementDefinition.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Koroneiki_EntitlementDefinition.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CLASSNAMEID_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long ENTITLEMENTDEFINITIONKEY_COLUMN_BITMASK = 4L;

	public static final long NAME_COLUMN_BITMASK = 8L;

	public static final long STATUS_COLUMN_BITMASK = 16L;

	public static final long UUID_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EntitlementDefinition toModel(
		EntitlementDefinitionSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		EntitlementDefinition model = new EntitlementDefinitionImpl();

		model.setMvccVersion(soapModel.getMvccVersion());
		model.setUuid(soapModel.getUuid());
		model.setEntitlementDefinitionId(
			soapModel.getEntitlementDefinitionId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setEntitlementDefinitionKey(
			soapModel.getEntitlementDefinitionKey());
		model.setClassNameId(soapModel.getClassNameId());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setDefinition(soapModel.getDefinition());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EntitlementDefinition> toModels(
		EntitlementDefinitionSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<EntitlementDefinition> models =
			new ArrayList<EntitlementDefinition>(soapModels.length);

		for (EntitlementDefinitionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EntitlementDefinitionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _entitlementDefinitionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEntitlementDefinitionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _entitlementDefinitionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EntitlementDefinition.class;
	}

	@Override
	public String getModelClassName() {
		return EntitlementDefinition.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EntitlementDefinition, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EntitlementDefinition, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EntitlementDefinition, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EntitlementDefinition)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EntitlementDefinition, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EntitlementDefinition, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EntitlementDefinition)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EntitlementDefinition, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EntitlementDefinition, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EntitlementDefinition>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EntitlementDefinition.class.getClassLoader(),
			EntitlementDefinition.class, ModelWrapper.class);

		try {
			Constructor<EntitlementDefinition> constructor =
				(Constructor<EntitlementDefinition>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<EntitlementDefinition, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EntitlementDefinition, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EntitlementDefinition, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<EntitlementDefinition, Object>>();
		Map<String, BiConsumer<EntitlementDefinition, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<EntitlementDefinition, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", EntitlementDefinition::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<EntitlementDefinition, Long>)
				EntitlementDefinition::setMvccVersion);
		attributeGetterFunctions.put("uuid", EntitlementDefinition::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<EntitlementDefinition, String>)
				EntitlementDefinition::setUuid);
		attributeGetterFunctions.put(
			"entitlementDefinitionId",
			EntitlementDefinition::getEntitlementDefinitionId);
		attributeSetterBiConsumers.put(
			"entitlementDefinitionId",
			(BiConsumer<EntitlementDefinition, Long>)
				EntitlementDefinition::setEntitlementDefinitionId);
		attributeGetterFunctions.put(
			"companyId", EntitlementDefinition::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EntitlementDefinition, Long>)
				EntitlementDefinition::setCompanyId);
		attributeGetterFunctions.put(
			"userId", EntitlementDefinition::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<EntitlementDefinition, Long>)
				EntitlementDefinition::setUserId);
		attributeGetterFunctions.put(
			"createDate", EntitlementDefinition::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EntitlementDefinition, Date>)
				EntitlementDefinition::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EntitlementDefinition::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EntitlementDefinition, Date>)
				EntitlementDefinition::setModifiedDate);
		attributeGetterFunctions.put(
			"entitlementDefinitionKey",
			EntitlementDefinition::getEntitlementDefinitionKey);
		attributeSetterBiConsumers.put(
			"entitlementDefinitionKey",
			(BiConsumer<EntitlementDefinition, String>)
				EntitlementDefinition::setEntitlementDefinitionKey);
		attributeGetterFunctions.put(
			"classNameId", EntitlementDefinition::getClassNameId);
		attributeSetterBiConsumers.put(
			"classNameId",
			(BiConsumer<EntitlementDefinition, Long>)
				EntitlementDefinition::setClassNameId);
		attributeGetterFunctions.put("name", EntitlementDefinition::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<EntitlementDefinition, String>)
				EntitlementDefinition::setName);
		attributeGetterFunctions.put(
			"description", EntitlementDefinition::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<EntitlementDefinition, String>)
				EntitlementDefinition::setDescription);
		attributeGetterFunctions.put(
			"definition", EntitlementDefinition::getDefinition);
		attributeSetterBiConsumers.put(
			"definition",
			(BiConsumer<EntitlementDefinition, String>)
				EntitlementDefinition::setDefinition);
		attributeGetterFunctions.put(
			"status", EntitlementDefinition::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<EntitlementDefinition, Integer>)
				EntitlementDefinition::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getEntitlementDefinitionId() {
		return _entitlementDefinitionId;
	}

	@Override
	public void setEntitlementDefinitionId(long entitlementDefinitionId) {
		_entitlementDefinitionId = entitlementDefinitionId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEntitlementDefinitionKey() {
		if (_entitlementDefinitionKey == null) {
			return "";
		}
		else {
			return _entitlementDefinitionKey;
		}
	}

	@Override
	public void setEntitlementDefinitionKey(String entitlementDefinitionKey) {
		_columnBitmask |= ENTITLEMENTDEFINITIONKEY_COLUMN_BITMASK;

		if (_originalEntitlementDefinitionKey == null) {
			_originalEntitlementDefinitionKey = _entitlementDefinitionKey;
		}

		_entitlementDefinitionKey = entitlementDefinitionKey;
	}

	public String getOriginalEntitlementDefinitionKey() {
		return GetterUtil.getString(_originalEntitlementDefinitionKey);
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return "";
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getDefinition() {
		if (_definition == null) {
			return "";
		}
		else {
			return _definition;
		}
	}

	@Override
	public void setDefinition(String definition) {
		_definition = definition;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(EntitlementDefinition.class.getName()),
			getClassNameId());
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EntitlementDefinition.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EntitlementDefinition toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EntitlementDefinition>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EntitlementDefinitionImpl entitlementDefinitionImpl =
			new EntitlementDefinitionImpl();

		entitlementDefinitionImpl.setMvccVersion(getMvccVersion());
		entitlementDefinitionImpl.setUuid(getUuid());
		entitlementDefinitionImpl.setEntitlementDefinitionId(
			getEntitlementDefinitionId());
		entitlementDefinitionImpl.setCompanyId(getCompanyId());
		entitlementDefinitionImpl.setUserId(getUserId());
		entitlementDefinitionImpl.setCreateDate(getCreateDate());
		entitlementDefinitionImpl.setModifiedDate(getModifiedDate());
		entitlementDefinitionImpl.setEntitlementDefinitionKey(
			getEntitlementDefinitionKey());
		entitlementDefinitionImpl.setClassNameId(getClassNameId());
		entitlementDefinitionImpl.setName(getName());
		entitlementDefinitionImpl.setDescription(getDescription());
		entitlementDefinitionImpl.setDefinition(getDefinition());
		entitlementDefinitionImpl.setStatus(getStatus());

		entitlementDefinitionImpl.resetOriginalValues();

		return entitlementDefinitionImpl;
	}

	@Override
	public int compareTo(EntitlementDefinition entitlementDefinition) {
		int value = 0;

		value = getName().compareTo(entitlementDefinition.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EntitlementDefinition)) {
			return false;
		}

		EntitlementDefinition entitlementDefinition =
			(EntitlementDefinition)object;

		long primaryKey = entitlementDefinition.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		EntitlementDefinitionModelImpl entitlementDefinitionModelImpl = this;

		entitlementDefinitionModelImpl._originalUuid =
			entitlementDefinitionModelImpl._uuid;

		entitlementDefinitionModelImpl._originalCompanyId =
			entitlementDefinitionModelImpl._companyId;

		entitlementDefinitionModelImpl._setOriginalCompanyId = false;

		entitlementDefinitionModelImpl._setModifiedDate = false;

		entitlementDefinitionModelImpl._originalEntitlementDefinitionKey =
			entitlementDefinitionModelImpl._entitlementDefinitionKey;

		entitlementDefinitionModelImpl._originalClassNameId =
			entitlementDefinitionModelImpl._classNameId;

		entitlementDefinitionModelImpl._setOriginalClassNameId = false;

		entitlementDefinitionModelImpl._originalName =
			entitlementDefinitionModelImpl._name;

		entitlementDefinitionModelImpl._originalStatus =
			entitlementDefinitionModelImpl._status;

		entitlementDefinitionModelImpl._setOriginalStatus = false;

		entitlementDefinitionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EntitlementDefinition> toCacheModel() {
		EntitlementDefinitionCacheModel entitlementDefinitionCacheModel =
			new EntitlementDefinitionCacheModel();

		entitlementDefinitionCacheModel.mvccVersion = getMvccVersion();

		entitlementDefinitionCacheModel.uuid = getUuid();

		String uuid = entitlementDefinitionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			entitlementDefinitionCacheModel.uuid = null;
		}

		entitlementDefinitionCacheModel.entitlementDefinitionId =
			getEntitlementDefinitionId();

		entitlementDefinitionCacheModel.companyId = getCompanyId();

		entitlementDefinitionCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			entitlementDefinitionCacheModel.createDate = createDate.getTime();
		}
		else {
			entitlementDefinitionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			entitlementDefinitionCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			entitlementDefinitionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		entitlementDefinitionCacheModel.entitlementDefinitionKey =
			getEntitlementDefinitionKey();

		String entitlementDefinitionKey =
			entitlementDefinitionCacheModel.entitlementDefinitionKey;

		if ((entitlementDefinitionKey != null) &&
			(entitlementDefinitionKey.length() == 0)) {

			entitlementDefinitionCacheModel.entitlementDefinitionKey = null;
		}

		entitlementDefinitionCacheModel.classNameId = getClassNameId();

		entitlementDefinitionCacheModel.name = getName();

		String name = entitlementDefinitionCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			entitlementDefinitionCacheModel.name = null;
		}

		entitlementDefinitionCacheModel.description = getDescription();

		String description = entitlementDefinitionCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			entitlementDefinitionCacheModel.description = null;
		}

		entitlementDefinitionCacheModel.definition = getDefinition();

		String definition = entitlementDefinitionCacheModel.definition;

		if ((definition != null) && (definition.length() == 0)) {
			entitlementDefinitionCacheModel.definition = null;
		}

		entitlementDefinitionCacheModel.status = getStatus();

		return entitlementDefinitionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EntitlementDefinition, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EntitlementDefinition, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EntitlementDefinition, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((EntitlementDefinition)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EntitlementDefinition, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EntitlementDefinition, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EntitlementDefinition, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((EntitlementDefinition)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EntitlementDefinition>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mvccVersion;
	private String _uuid;
	private String _originalUuid;
	private long _entitlementDefinitionId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _entitlementDefinitionKey;
	private String _originalEntitlementDefinitionKey;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private String _name;
	private String _originalName;
	private String _description;
	private String _definition;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private EntitlementDefinition _escapedModel;

}