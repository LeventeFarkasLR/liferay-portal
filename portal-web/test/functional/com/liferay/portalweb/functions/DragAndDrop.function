@default = "dragAndDropToObject"
definition {

	function dragAndDrop {
		WaitForSPARefresh();

		selenium.dragAndDrop();

		selenium.assertJavaScriptErrors();

		selenium.assertLiferayErrors();
	}

	function dragAndDropPortletToObject {
		WaitForSPARefresh();

		selenium.waitForElementPresent("${locator1}");

		selenium.mouseOver("${locator1}");

		selenium.waitForVisible("${locator1}");

		selenium.waitForTextCaseInsensitive("${locator1}", "${value1}");

		selenium.waitForVisible("${locator2}");

		selenium.mouseOver("${locator2}");

		selenium.mouseDown("${locator1}");

		selenium.mouseMoveAt("${locator2}", "0,50");

		selenium.mouseMoveAt("${locator2}", "0,-50");

		selenium.mouseMoveAt("${locator2}", "0,50");

		selenium.mouseMove("${locator2}");

		selenium.mouseRelease("${locator2}");

		selenium.assertJavaScriptErrors();

		selenium.assertLiferayErrors();
	}

	function dragAndDropToObject {
		WaitForSPARefresh();

		selenium.waitForVisible("${locator1}");

		selenium.mouseOver("${locator1}");

		selenium.waitForPartialTextCaseInsensitive("${locator1}", "${value1}");

		selenium.waitForVisible("${locator2}");

		selenium.mouseOver("${locator2}");

		selenium.dragAndDropToObject("${locator1}", "${locator2}");

		selenium.assertJavaScriptErrors();

		selenium.assertLiferayErrors();
	}

	function javaScriptDragAndDropToObject {
		WaitForSPARefresh();

		var javaScript = '''
Simulate = {
	dragAndDrop: function (source, target) {
		const dispatchEvent = function (type, element) {
			const rect = element.getBoundingClientRect();
			const event = document.createEvent('customEvent');
			event.initEvent(type, true, true);
			event.relatedTarget = element;
			(event.clientX = rect.left + rect.width / 2),
				(event.clientY = rect.top + rect.height / 2),
				element.dispatchEvent(event);
			return Promise.resolve();
		};
		dispatchEvent('dragstart', source)
			.then(function () {
				dispatchEvent('dragover', target);
			})
			.then(function () {
				dispatchEvent('drop', target);
			})
			.then(function () {
				dispatchEvent('dragend', source);
			});
	}
};

Simulate.dragAndDrop(arguments[0], arguments[1]);
		''';

		selenium.executeJavaScript("${javaScript}", "${locator1}", "${locator2}");

		selenium.assertJavaScriptErrors();

		selenium.assertLiferayErrors();
	}

}